{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentaci\u00f3n de API Gateway Introducci\u00f3n La aplicaci\u00f3n API Gateway es un conjunto de servicios orientados a estandarizar y publicar APIs de distinta \u00edndole de distintos miembros de la la Administraci\u00f3n P\u00fablica Nacional. \u00c9stos servicios est\u00e1n limitados a: Publicaci\u00f3n de una API en una ubicaci\u00f3n URI en la World Wide Web con un nombre de dominio com\u00fan (ej: apis.datos.gob.ar). Facilitar la administraci\u00f3n de \u00e9stas APIs (dar de alta, dar de baja, modificar path base, cambiar de ambientes etc.) Servicios de autenticaci\u00f3n de usuarios. Administraci\u00f3n de quotas de servicio y SLAs. Recolecci\u00f3n de analytics de uso de las APIs. La herramienta permite exponer APIs desarrolladas por distintos equipos de la APN, pudiendo ser estas APIs implementadas en distintas tecnolog\u00edas y plataformas. Componentes de la arquitectura Los servicios de API Gateway est\u00e1n implementados como dos grandes componentes: Kong API Cluster El punto de entrada a cualquier API publicada por API Gateway est\u00e1 implementado usando el producto de c\u00f3digo abierto Kong , en su variedad Community Edition . Kong permite publicar APIs y montar los distintos servicios que se le brindan. Aplicaci\u00f3n API Management La aplicaci\u00f3n API Management es una aplicaci\u00f3n web que se utiliza para configurar la instancia de Kong. Basada en Django 2.0 y Python3 utiliza un cliente Python de Kong para configurar Kong luego de cada operaci\u00f3n de configuraci\u00f3n realizada por los administradores de la misma. Esta aplicaci\u00f3n permite configurar la instancia de Kong mediante una interfaz web, en vez de utilizar una sesi\u00f3n bash y un cliente REST . Adicionalmente esta aplicaci\u00f3n funciona como repositorio de las APIs configuradas en la aplicaci\u00f3n, indicando los endpoints y los requerimientos de autenticaci\u00f3n y rate-limiting. El grueso de las funcionalidades de API Gateway se utilizan y configuran a trav\u00e9s de API Management. El backoffice (admin de Django) se puede acceder en /management/ingresar . Ver - Documentaci\u00f3n de uso aqu\u00ed","title":"Inicio"},{"location":"#documentacion-de-api-gateway","text":"","title":"Documentaci\u00f3n de API Gateway"},{"location":"#introduccion","text":"La aplicaci\u00f3n API Gateway es un conjunto de servicios orientados a estandarizar y publicar APIs de distinta \u00edndole de distintos miembros de la la Administraci\u00f3n P\u00fablica Nacional. \u00c9stos servicios est\u00e1n limitados a: Publicaci\u00f3n de una API en una ubicaci\u00f3n URI en la World Wide Web con un nombre de dominio com\u00fan (ej: apis.datos.gob.ar). Facilitar la administraci\u00f3n de \u00e9stas APIs (dar de alta, dar de baja, modificar path base, cambiar de ambientes etc.) Servicios de autenticaci\u00f3n de usuarios. Administraci\u00f3n de quotas de servicio y SLAs. Recolecci\u00f3n de analytics de uso de las APIs. La herramienta permite exponer APIs desarrolladas por distintos equipos de la APN, pudiendo ser estas APIs implementadas en distintas tecnolog\u00edas y plataformas.","title":"Introducci\u00f3n"},{"location":"#componentes-de-la-arquitectura","text":"Los servicios de API Gateway est\u00e1n implementados como dos grandes componentes:","title":"Componentes de la arquitectura"},{"location":"#kong-api-cluster","text":"El punto de entrada a cualquier API publicada por API Gateway est\u00e1 implementado usando el producto de c\u00f3digo abierto Kong , en su variedad Community Edition . Kong permite publicar APIs y montar los distintos servicios que se le brindan.","title":"Kong API Cluster"},{"location":"#aplicacion-api-management","text":"La aplicaci\u00f3n API Management es una aplicaci\u00f3n web que se utiliza para configurar la instancia de Kong. Basada en Django 2.0 y Python3 utiliza un cliente Python de Kong para configurar Kong luego de cada operaci\u00f3n de configuraci\u00f3n realizada por los administradores de la misma. Esta aplicaci\u00f3n permite configurar la instancia de Kong mediante una interfaz web, en vez de utilizar una sesi\u00f3n bash y un cliente REST . Adicionalmente esta aplicaci\u00f3n funciona como repositorio de las APIs configuradas en la aplicaci\u00f3n, indicando los endpoints y los requerimientos de autenticaci\u00f3n y rate-limiting. El grueso de las funcionalidades de API Gateway se utilizan y configuran a trav\u00e9s de API Management. El backoffice (admin de Django) se puede acceder en /management/ingresar . Ver - Documentaci\u00f3n de uso aqu\u00ed","title":"Aplicaci\u00f3n API Management"},{"location":"development/","text":"API Management Setup Requerimientos El sistema est\u00e1 pensado para correr bajo entornos *nix, en particular Ubuntu 16.04. Este proyecto require python 3.6. Python 3 puede ser instalado con pyenv . Usar pyenv-installer para instalar pyenv Ver las versiones de python disponibles: pyenv install --list Instalar python 3. Ejemplo: pyenv install 3.6.6 (3.6.6 o mayor) Tambien nodejs es necesario para usar eslint y jscpd . Instalar nodejs , esto se puede llevar a cabo mediante nvm . Instalar la version 7 de nodejs Usar npm para instalar las dependencias: npm install Las dependencias de la aplicaci\u00f3n (Elasticsearch, Postgres, Redis, Kong) se manejan a trav\u00e9s de Docker y docker-compose. Settings Este proyecto adopta The 12 factor methodology . Esto significa que todas las configuraciones deberian hacerse por variables de entorno. (Factor III) . Paso previo Decidir un puerto bajo el cual correr la aplicaci\u00f3n Django. Tanto Django como Kong usan como default el puerto 8000, por lo tanto Django debe correr bajo otro puerto arbitrario. La aplicaci\u00f3n debe correr bajo la red interna obligatoriamente, para que el contenedor de Kong pueda llegar a la aplicaci\u00f3n Django local . Por ejemplo, se puede correr Django como ./manage.py runserver 192.168.1.181 7999 . Para correr los pr\u00f3ximos pasos, setear una variable DJANGO_URL con la URL (con schema) bajo la cual correr\u00e1 la aplicaci\u00f3n Django. Por ejemplo: DJANGO_URL=http://192.168.1.181:7999/ La IP de la red interna se puede obtener a trav\u00e9s de utilidades del sistema como ip o ifconfig , suele ser 192.168.*.* . Setup de docker Build: docker-compose build Iniciar los servicios: docker-compose up -d Migrar la base de datos de kong: docker-compose run --rm kong kong migrations up Reiniciar kong: docker-compose restart kong Agregar ruta de api management a kong curl -X POST localhost:8001/apis -d name=management -d upstream_url=$DJANGO_URL -d uris=/management -d strip_uri=false Configuracion Local Crear un \"virtualenv\" con un nombre descriptivo: pyenv virtualenv 3.6.6 my_virtualenv Crear un archivo .python-version : echo \"my_virtualenv\" > .python-version Instalar los requerimientos: pip install -r requirements/local.txt Copiar el archivo conf/settings/.env.local a conf/settings/.env (y reemplazar las variables de ser necesario) Migrar la base de datos: ./manage.py migrate Crear un super usuario: ./manage.py createsuperuser Plugins Para mapear plugins a una serie se puede hacer desde la configuracion de la misma desde el Admin. En ella se encuentra la configuracion para cada plugin disponible, por ejemplo para activar Analytics a una serie se hace activando \"Kong Api plugin http log\" agregandole, en el campo \"Api Key\", el Token de acceso. Correr la aplicaci\u00f3n Finalmente, se puede correr la aplicaci\u00f3n con ./manage.py runserver <IP RED INTERNA> <PUERTO> , y acceder a trav\u00e9s de kong en http://localhost:8000/management/ingresar . Workers Por defecto la configuraci\u00f3n local no utiliza workers asincr\u00f3nicos, pero pueden ser activados seteando queue['ASYNC'] = True en el ciclo for dentro de conf/settings/local.py . Migraciones de la API de Kong Casi todos los modelos de la aplicaci\u00f3n api_registry requieren hacer una migraci\u00f3n de las APIs de Kong (con actualizar una API es suficiente). A continuaci\u00f3n se listan los encontrados hasta la fecha: KongObject , KongApi , KongApiPlugin , KongPlugin , KongConsumerManager , KongConsumer , JwtCredentialManager , JwtCredential , TokenRequest , KongPluginRateLimiting , KongApiPluginRateLimiting , KongApiPluginHttpLog , KongApiPluginJwt , KongApiPluginAcl , AclGroup , KongConsumerPlugin , KongConsumerPluginRateLimiting , KongApiPluginCors , RootKongApi , Git hooks Instalar git-hooks . Instalar los hooks de git: git hooks install Tips: Server para desarrollo ./manage.py runserver Consola de django ./manage.py shell Con Docker: docker-compose run django python3 manage.py migrate Tests python manage.py test Correr Lint/Style/CPD Flake8 : scripts/flake8.sh Pylint : scripts/pylint.sh Jscpd : scripts/jscpd.sh Eslint : scripts/eslint.sh","title":"Desarrollo"},{"location":"development/#api-management","text":"","title":"API Management"},{"location":"development/#setup","text":"","title":"Setup"},{"location":"development/#requerimientos","text":"El sistema est\u00e1 pensado para correr bajo entornos *nix, en particular Ubuntu 16.04. Este proyecto require python 3.6. Python 3 puede ser instalado con pyenv . Usar pyenv-installer para instalar pyenv Ver las versiones de python disponibles: pyenv install --list Instalar python 3. Ejemplo: pyenv install 3.6.6 (3.6.6 o mayor) Tambien nodejs es necesario para usar eslint y jscpd . Instalar nodejs , esto se puede llevar a cabo mediante nvm . Instalar la version 7 de nodejs Usar npm para instalar las dependencias: npm install Las dependencias de la aplicaci\u00f3n (Elasticsearch, Postgres, Redis, Kong) se manejan a trav\u00e9s de Docker y docker-compose.","title":"Requerimientos"},{"location":"development/#settings","text":"Este proyecto adopta The 12 factor methodology . Esto significa que todas las configuraciones deberian hacerse por variables de entorno. (Factor III) .","title":"Settings"},{"location":"development/#paso-previo","text":"Decidir un puerto bajo el cual correr la aplicaci\u00f3n Django. Tanto Django como Kong usan como default el puerto 8000, por lo tanto Django debe correr bajo otro puerto arbitrario. La aplicaci\u00f3n debe correr bajo la red interna obligatoriamente, para que el contenedor de Kong pueda llegar a la aplicaci\u00f3n Django local . Por ejemplo, se puede correr Django como ./manage.py runserver 192.168.1.181 7999 . Para correr los pr\u00f3ximos pasos, setear una variable DJANGO_URL con la URL (con schema) bajo la cual correr\u00e1 la aplicaci\u00f3n Django. Por ejemplo: DJANGO_URL=http://192.168.1.181:7999/ La IP de la red interna se puede obtener a trav\u00e9s de utilidades del sistema como ip o ifconfig , suele ser 192.168.*.* .","title":"Paso previo"},{"location":"development/#setup-de-docker","text":"Build: docker-compose build Iniciar los servicios: docker-compose up -d Migrar la base de datos de kong: docker-compose run --rm kong kong migrations up Reiniciar kong: docker-compose restart kong Agregar ruta de api management a kong curl -X POST localhost:8001/apis -d name=management -d upstream_url=$DJANGO_URL -d uris=/management -d strip_uri=false","title":"Setup de docker"},{"location":"development/#configuracion-local","text":"Crear un \"virtualenv\" con un nombre descriptivo: pyenv virtualenv 3.6.6 my_virtualenv Crear un archivo .python-version : echo \"my_virtualenv\" > .python-version Instalar los requerimientos: pip install -r requirements/local.txt Copiar el archivo conf/settings/.env.local a conf/settings/.env (y reemplazar las variables de ser necesario) Migrar la base de datos: ./manage.py migrate Crear un super usuario: ./manage.py createsuperuser","title":"Configuracion Local"},{"location":"development/#plugins","text":"Para mapear plugins a una serie se puede hacer desde la configuracion de la misma desde el Admin. En ella se encuentra la configuracion para cada plugin disponible, por ejemplo para activar Analytics a una serie se hace activando \"Kong Api plugin http log\" agregandole, en el campo \"Api Key\", el Token de acceso.","title":"Plugins"},{"location":"development/#correr-la-aplicacion","text":"Finalmente, se puede correr la aplicaci\u00f3n con ./manage.py runserver <IP RED INTERNA> <PUERTO> , y acceder a trav\u00e9s de kong en http://localhost:8000/management/ingresar .","title":"Correr la aplicaci\u00f3n"},{"location":"development/#workers","text":"Por defecto la configuraci\u00f3n local no utiliza workers asincr\u00f3nicos, pero pueden ser activados seteando queue['ASYNC'] = True en el ciclo for dentro de conf/settings/local.py .","title":"Workers"},{"location":"development/#migraciones-de-la-api-de-kong","text":"Casi todos los modelos de la aplicaci\u00f3n api_registry requieren hacer una migraci\u00f3n de las APIs de Kong (con actualizar una API es suficiente). A continuaci\u00f3n se listan los encontrados hasta la fecha: KongObject , KongApi , KongApiPlugin , KongPlugin , KongConsumerManager , KongConsumer , JwtCredentialManager , JwtCredential , TokenRequest , KongPluginRateLimiting , KongApiPluginRateLimiting , KongApiPluginHttpLog , KongApiPluginJwt , KongApiPluginAcl , AclGroup , KongConsumerPlugin , KongConsumerPluginRateLimiting , KongApiPluginCors , RootKongApi ,","title":"Migraciones de la API de Kong"},{"location":"development/#git-hooks","text":"Instalar git-hooks . Instalar los hooks de git: git hooks install","title":"Git hooks"},{"location":"development/#tips","text":"","title":"Tips:"},{"location":"development/#server-para-desarrollo","text":"./manage.py runserver","title":"Server para desarrollo"},{"location":"development/#consola-de-django","text":"./manage.py shell Con Docker: docker-compose run django python3 manage.py migrate","title":"Consola de django"},{"location":"development/#tests","text":"python manage.py test","title":"Tests"},{"location":"development/#correr-lintstylecpd","text":"Flake8 : scripts/flake8.sh Pylint : scripts/pylint.sh Jscpd : scripts/jscpd.sh Eslint : scripts/eslint.sh","title":"Correr Lint/Style/CPD"},{"location":"usage/","text":"Gu\u00eda de uso Alta de una API Luego de iniciar sesi\u00f3n como administradores, debemos ir a la p\u00e1gina de creaci\u00f3n de KongApi s. Al acceder al formulario, s\u00f3lo tres campos ser\u00e1n requeridos. name : Nombre que le daremos a la API internamente. Ser\u00e1 \u00fanico en el sistema y no podr\u00e1 cambiarse luego de ingresado. Debe ser un valor alfanum\u00e9rico y solo acepta estos - _ ~ caracteres especiales. Ejemplo: series-tiempo-testing upstream url : Debe ser el upstream a donde se redireccionar\u00e1n las llamadas. Debe incluir el protocolo. Puede ser una dominio o una IP interna o externa. Puede incluir el \"path\", pero no es lo m\u00e1s com\u00fan. Ejemplo: http://192.168.65.4 . URI : \"Path\" que servir\u00e1 para verificar si una llamada debe ser redireccionada al \"upstream url\". Debe empezar con / y no debe terminar con / . Ejemplos: /series , /georef enabled : Define si una API est\u00e1 activada o no. Documentaci\u00f3n Swagger Por defecto, si configuramos la API con una URI del estilo /series , no se mostrar\u00e1 nada en ese \"path\". Para mostrar la documentaci\u00f3n de la API en ese \"path\" usando swagger.io , debemos Llenar al campo documentation url con la URL al yaml con la definici\u00f3n de la API. Esta URL debe ser de p\u00fablico acceso . Redirecci\u00f3n a la documentaci\u00f3n Es posible usar el mismo campo para lograr que el usuario sea redireccionado a una documentaci\u00f3n fuera del control de API gateway. Para ello debemos destildar el campo use swagger (en el panel \"advanced\"). Esto har\u00e1 que la aplicaci\u00f3n devuelva un c\u00f3digo HTTP 302, y redireccionar\u00e1 al usuario a la URL definida en documentation url . Modificaciones sobre la llamada strip_uri Es posible evitar que el la URI que definimos no llegue como parte de la llamada al upstream url . Por ejemplo, pudi\u00e9ramos querer definir una URI del estilo /miapi1 , pero que al servidor solo le llegue lo que este despu\u00e9s de ese \"path\". Esto es posible lograrlo al tildar el campo strip uri en el panel \"advanced\". preserve_host Se puede forzar que la api reciba en el header host, el valor recibido en api management. Por default, se env\u00eda el host con el cual api management conoce a su api. Para mas informacion consultar la documentaci\u00f3n de kong al respecto Plugins A cada API se le peuden configurar varios plugins adicionales. HttpLog Rate-Limiting JWT Analytics de uso Las APIs que tengan el plugin de HttpLog activado, tendr\u00e1n sus consultas guardadas en la base de datos de api management, bajo el modelo de Django Query . Estos datos se disponibilizan de diferentes maneras. Para informaci\u00f3n adicional, ver Analytics .","title":"Manual de uso"},{"location":"usage/#guia-de-uso","text":"","title":"Gu\u00eda de uso"},{"location":"usage/#alta-de-una-api","text":"Luego de iniciar sesi\u00f3n como administradores, debemos ir a la p\u00e1gina de creaci\u00f3n de KongApi s. Al acceder al formulario, s\u00f3lo tres campos ser\u00e1n requeridos. name : Nombre que le daremos a la API internamente. Ser\u00e1 \u00fanico en el sistema y no podr\u00e1 cambiarse luego de ingresado. Debe ser un valor alfanum\u00e9rico y solo acepta estos - _ ~ caracteres especiales. Ejemplo: series-tiempo-testing upstream url : Debe ser el upstream a donde se redireccionar\u00e1n las llamadas. Debe incluir el protocolo. Puede ser una dominio o una IP interna o externa. Puede incluir el \"path\", pero no es lo m\u00e1s com\u00fan. Ejemplo: http://192.168.65.4 . URI : \"Path\" que servir\u00e1 para verificar si una llamada debe ser redireccionada al \"upstream url\". Debe empezar con / y no debe terminar con / . Ejemplos: /series , /georef enabled : Define si una API est\u00e1 activada o no.","title":"Alta de una API"},{"location":"usage/#documentacion","text":"","title":"Documentaci\u00f3n"},{"location":"usage/#swagger","text":"Por defecto, si configuramos la API con una URI del estilo /series , no se mostrar\u00e1 nada en ese \"path\". Para mostrar la documentaci\u00f3n de la API en ese \"path\" usando swagger.io , debemos Llenar al campo documentation url con la URL al yaml con la definici\u00f3n de la API. Esta URL debe ser de p\u00fablico acceso .","title":"Swagger"},{"location":"usage/#redireccion-a-la-documentacion","text":"Es posible usar el mismo campo para lograr que el usuario sea redireccionado a una documentaci\u00f3n fuera del control de API gateway. Para ello debemos destildar el campo use swagger (en el panel \"advanced\"). Esto har\u00e1 que la aplicaci\u00f3n devuelva un c\u00f3digo HTTP 302, y redireccionar\u00e1 al usuario a la URL definida en documentation url .","title":"Redirecci\u00f3n a la documentaci\u00f3n"},{"location":"usage/#modificaciones-sobre-la-llamada","text":"","title":"Modificaciones sobre la llamada"},{"location":"usage/#strip_uri","text":"Es posible evitar que el la URI que definimos no llegue como parte de la llamada al upstream url . Por ejemplo, pudi\u00e9ramos querer definir una URI del estilo /miapi1 , pero que al servidor solo le llegue lo que este despu\u00e9s de ese \"path\". Esto es posible lograrlo al tildar el campo strip uri en el panel \"advanced\".","title":"strip_uri"},{"location":"usage/#preserve_host","text":"Se puede forzar que la api reciba en el header host, el valor recibido en api management. Por default, se env\u00eda el host con el cual api management conoce a su api. Para mas informacion consultar la documentaci\u00f3n de kong al respecto","title":"preserve_host"},{"location":"usage/#plugins","text":"A cada API se le peuden configurar varios plugins adicionales. HttpLog Rate-Limiting JWT","title":"Plugins"},{"location":"usage/#analytics-de-uso","text":"Las APIs que tengan el plugin de HttpLog activado, tendr\u00e1n sus consultas guardadas en la base de datos de api management, bajo el modelo de Django Query . Estos datos se disponibilizan de diferentes maneras. Para informaci\u00f3n adicional, ver Analytics .","title":"Analytics de uso"},{"location":"usage/analytics/","text":"Analytics Endpoint Los analytics de las apis con logs activados se obtienen haciendo GET /management/api/analytics/queries/ . Este endpoint requiere autenticacion por token, interno de Kong. No es posible generarlo a trav\u00e9s de la interfaz de API Management. Se puede obtener un token con curl -X POST <kong>/management/api/token/ -d username=<username> -d password=<password> Para autenticarse enviar el token en el header Authorization: Token <token> . Se pueden obtener queries con curl -X GET <kong>/management/api/analytics/queries/ -H 'Authorization: Token <token>' Parametro Descripcion cursor Indica desplazamiento de pagina por cursor kong_api_id Id de api que se quiere filtrar. Respuesta: HTTP 200 OK { \"next\": \"http://<kong>/management/api/analytics/queries/?cursor=xxxxxxx\", \"previous\": null, \"results\": [ { \"id\": 1, \"ip_address\": \"123.123.123.123\", \"host\": \"datos.gob.ar\", \"uri\": \"/series/v1/series/\", \"api_data\": 1, \"querystring\": \"\", \"start_time\": \"2018-01-05T13:30:00-03:00\", \"request_time\": \"0.0001220000000000000000000\", \"status_code\": 200, \"user_agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0\" } ] } Generaci\u00f3n de CSV de analytics Todos los d\u00edas, en el ambiente de deploy, se ejecuta el comando python manage.py generate_analytics para generar un archivo .csv el cual contiene la informaci\u00f3n de todas las Query que se hicieron el d\u00eda anterior. Si se busca generar todos los analytics desde la primer Query realizada, hay que corre el comando python manage.py generate_analytics --all . Esto recorre todas las Query de la DB y genera un archivo .csv por d\u00eda para cada una de ellas. Es un proceso asincr\u00f3nico, por lo tanto, va a correr cuando los workers est\u00e9n disponibles m\u00e1s all\u00e1 de ver el mensaje en pantalla \"Generando csv....\". Este CSV puede accederse en el endpoint /management/api/analytics/<kong_api_name>/analytics_<fecha>.csv , por ejemplo: /management/api/analytics/series/analytics_2018-06-30.csv Generaci\u00f3n de CSV de indicadores por APIs Todos los d\u00edas, en el ambiente de deploy, se ejecuta el comando python manage.py generate_indicators para generar un archivo .csv el cual contiene la informaci\u00f3n de los indicadores por APIs. Cada row representa un d\u00eda. Es un proceso asincr\u00f3nico, por lo tanto, va a correr cuando los workers est\u00e9n disponibles m\u00e1s all\u00e1 de ver el mensaje en pantalla \"Generando csv....\". Este CSV puede accederse en el endpoint /management/api/analytics/<kong_api_name>_indicadores.csv , por ejemplo: /management/api/analytics/series-tiempo-indicadores.csv Borrado de analytics por d\u00eda Si por alguna raz\u00f3n se quieren borrar analytics, por ejemplo despu\u00e9s de un test de stress, se puede utilizar el comando de django delete_analytics . \u00c9ste acepta una direcci\u00f3n IP y una fecha, y borra todos los registros asociados a esos dos par\u00e1metros. La fecha debe estar en formato YYYY-MM-DD (ISO8601) Ejemplo ./manage.py delete_analytics 192.168.254.254 2019-01-01","title":"Analytics"},{"location":"usage/analytics/#analytics","text":"","title":"Analytics"},{"location":"usage/analytics/#endpoint","text":"Los analytics de las apis con logs activados se obtienen haciendo GET /management/api/analytics/queries/ . Este endpoint requiere autenticacion por token, interno de Kong. No es posible generarlo a trav\u00e9s de la interfaz de API Management. Se puede obtener un token con curl -X POST <kong>/management/api/token/ -d username=<username> -d password=<password> Para autenticarse enviar el token en el header Authorization: Token <token> . Se pueden obtener queries con curl -X GET <kong>/management/api/analytics/queries/ -H 'Authorization: Token <token>' Parametro Descripcion cursor Indica desplazamiento de pagina por cursor kong_api_id Id de api que se quiere filtrar. Respuesta: HTTP 200 OK { \"next\": \"http://<kong>/management/api/analytics/queries/?cursor=xxxxxxx\", \"previous\": null, \"results\": [ { \"id\": 1, \"ip_address\": \"123.123.123.123\", \"host\": \"datos.gob.ar\", \"uri\": \"/series/v1/series/\", \"api_data\": 1, \"querystring\": \"\", \"start_time\": \"2018-01-05T13:30:00-03:00\", \"request_time\": \"0.0001220000000000000000000\", \"status_code\": 200, \"user_agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0\" } ] }","title":"Endpoint"},{"location":"usage/analytics/#generacion-de-csv-de-analytics","text":"Todos los d\u00edas, en el ambiente de deploy, se ejecuta el comando python manage.py generate_analytics para generar un archivo .csv el cual contiene la informaci\u00f3n de todas las Query que se hicieron el d\u00eda anterior. Si se busca generar todos los analytics desde la primer Query realizada, hay que corre el comando python manage.py generate_analytics --all . Esto recorre todas las Query de la DB y genera un archivo .csv por d\u00eda para cada una de ellas. Es un proceso asincr\u00f3nico, por lo tanto, va a correr cuando los workers est\u00e9n disponibles m\u00e1s all\u00e1 de ver el mensaje en pantalla \"Generando csv....\". Este CSV puede accederse en el endpoint /management/api/analytics/<kong_api_name>/analytics_<fecha>.csv , por ejemplo: /management/api/analytics/series/analytics_2018-06-30.csv","title":"Generaci\u00f3n de CSV de analytics"},{"location":"usage/analytics/#generacion-de-csv-de-indicadores-por-apis","text":"Todos los d\u00edas, en el ambiente de deploy, se ejecuta el comando python manage.py generate_indicators para generar un archivo .csv el cual contiene la informaci\u00f3n de los indicadores por APIs. Cada row representa un d\u00eda. Es un proceso asincr\u00f3nico, por lo tanto, va a correr cuando los workers est\u00e9n disponibles m\u00e1s all\u00e1 de ver el mensaje en pantalla \"Generando csv....\". Este CSV puede accederse en el endpoint /management/api/analytics/<kong_api_name>_indicadores.csv , por ejemplo: /management/api/analytics/series-tiempo-indicadores.csv","title":"Generaci\u00f3n de CSV de indicadores por APIs"},{"location":"usage/analytics/#borrado-de-analytics-por-dia","text":"Si por alguna raz\u00f3n se quieren borrar analytics, por ejemplo despu\u00e9s de un test de stress, se puede utilizar el comando de django delete_analytics . \u00c9ste acepta una direcci\u00f3n IP y una fecha, y borra todos los registros asociados a esos dos par\u00e1metros. La fecha debe estar en formato YYYY-MM-DD (ISO8601) Ejemplo ./manage.py delete_analytics 192.168.254.254 2019-01-01","title":"Borrado de analytics por d\u00eda"},{"location":"usage/apis/api_registration/","text":"","title":"Registro de APIs"},{"location":"usage/apis/plugins/http_log/","text":"Gu\u00eda de uso Logs Es posible, con una penalidad en el rendimiento de la API, lograr guardar todas las llamadas que se hacen a la misma. En el panel \"kong plugin HTTP logs\" podremos activar esta funcionalidad. Primero debemos proveer una api key para que puedan guardarse los registros de las llamadas, y finalmente debemos activar la funcionalidad al tildar el campo enabled . Las llamadas a la aplicaci\u00f3n ser\u00e1n registradas bajo la secci\u00f3n \"Analytics\", en el modelo Query .","title":"HTTP Log"},{"location":"usage/apis/plugins/http_log/#guia-de-uso","text":"","title":"Gu\u00eda de uso"},{"location":"usage/apis/plugins/http_log/#logs","text":"Es posible, con una penalidad en el rendimiento de la API, lograr guardar todas las llamadas que se hacen a la misma. En el panel \"kong plugin HTTP logs\" podremos activar esta funcionalidad. Primero debemos proveer una api key para que puedan guardarse los registros de las llamadas, y finalmente debemos activar la funcionalidad al tildar el campo enabled . Las llamadas a la aplicaci\u00f3n ser\u00e1n registradas bajo la secci\u00f3n \"Analytics\", en el modelo Query .","title":"Logs"},{"location":"usage/apis/plugins/jwt/","text":"Gu\u00eda de uso JWT Es posible requerir la autenticaci\u00f3n para el uso de una aplicaci\u00f3n. Mediante el panel \"KONG API PLUGIN JWTS\" podemos activar este mecanismo. Al activar este plugin, la aplicaci\u00f3n intentara autenticar usuario por API , y se los identificara como kong consumers . Si la opci\u00f3n Free tier esta activa, los usuarios sin token lograran acceder a la API pero identificados como un consumer anonimo (a.k.a. \"anonymous consumer\"). En caso contrario a los usuario sin token no se les permitir\u00e1 el accedo a la API. Para dar de alta un nuevo kong consumer es necesario crear un nuevo Token requests . Una vez creado, debemos aceptarlo mediante seleccionarlo en la pagina de listado de \"token requests\" y usando la acci\u00f3n ACCEPT . Esto nos creara un nuevo Kong Consumer . En el nuevo kong consumer podemos ver una secci\u00f3n \"JWT CREDENTIALS\". La misma contiene el par key / secret para las llamada que el cliente necesita hacer. Suponiendo que las claves son bOgu3TainXFFOgLi2Q27EE7BRtXIBqdD y lR39z3kcMNAHc44NzOgj9CENWndMLYWQ respectivamente, podr\u00edamos usar el debugger de https://jwt.io/ o https://github.com/jpadilla/pyjwt para generar el token. Al usar https://jwt.io nuestro payload debe lucir (haciendo uso de la \"key\"): { \"iss\": \"bOgu3TainXFFOgLi2Q27EE7BRtXIBqdD\" } y en VERIFY SIGNATURE ponemos el \"secret\". Al usar pyjwt podemos generarlo por l\u00ednea de comando: pyjwt --key=lR39z3kcMNAHc44NzOgj9CENWndMLYWQ encode iss=bOgu3TainXFFOgLi2Q27EE7BRtXIBqdD # => eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJiT2d1M1RhaW5YRkZPZ0xpMlEyN0VFN0JSdFhJQnFkRCJ9.hxyvLkUYmrlonrFUoQ_Il1Y7RcJXYV5DERHBzR7paa0 Luego al usar nuestra aplicaci\u00f3n, debemos agregar el \"header\" Authorization : url = http :// localhost : 8000 / series / api / series /? ids = 1 . 1_OGP_D_1993_A_17 token = \"$(pyjwt --key=lR39z3kcMNAHc44NzOgj9CENWndMLYWQ encode iss=bOgu3TainXFFOgLi2Q27EE7BRtXIBqdD)\" curl \"$url\" -H \"Authorization: Bearer $token\" ;","title":"JWT"},{"location":"usage/apis/plugins/jwt/#guia-de-uso","text":"","title":"Gu\u00eda de uso"},{"location":"usage/apis/plugins/jwt/#jwt","text":"Es posible requerir la autenticaci\u00f3n para el uso de una aplicaci\u00f3n. Mediante el panel \"KONG API PLUGIN JWTS\" podemos activar este mecanismo. Al activar este plugin, la aplicaci\u00f3n intentara autenticar usuario por API , y se los identificara como kong consumers . Si la opci\u00f3n Free tier esta activa, los usuarios sin token lograran acceder a la API pero identificados como un consumer anonimo (a.k.a. \"anonymous consumer\"). En caso contrario a los usuario sin token no se les permitir\u00e1 el accedo a la API. Para dar de alta un nuevo kong consumer es necesario crear un nuevo Token requests . Una vez creado, debemos aceptarlo mediante seleccionarlo en la pagina de listado de \"token requests\" y usando la acci\u00f3n ACCEPT . Esto nos creara un nuevo Kong Consumer . En el nuevo kong consumer podemos ver una secci\u00f3n \"JWT CREDENTIALS\". La misma contiene el par key / secret para las llamada que el cliente necesita hacer. Suponiendo que las claves son bOgu3TainXFFOgLi2Q27EE7BRtXIBqdD y lR39z3kcMNAHc44NzOgj9CENWndMLYWQ respectivamente, podr\u00edamos usar el debugger de https://jwt.io/ o https://github.com/jpadilla/pyjwt para generar el token. Al usar https://jwt.io nuestro payload debe lucir (haciendo uso de la \"key\"): { \"iss\": \"bOgu3TainXFFOgLi2Q27EE7BRtXIBqdD\" } y en VERIFY SIGNATURE ponemos el \"secret\". Al usar pyjwt podemos generarlo por l\u00ednea de comando: pyjwt --key=lR39z3kcMNAHc44NzOgj9CENWndMLYWQ encode iss=bOgu3TainXFFOgLi2Q27EE7BRtXIBqdD # => eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJiT2d1M1RhaW5YRkZPZ0xpMlEyN0VFN0JSdFhJQnFkRCJ9.hxyvLkUYmrlonrFUoQ_Il1Y7RcJXYV5DERHBzR7paa0 Luego al usar nuestra aplicaci\u00f3n, debemos agregar el \"header\" Authorization : url = http :// localhost : 8000 / series / api / series /? ids = 1 . 1_OGP_D_1993_A_17 token = \"$(pyjwt --key=lR39z3kcMNAHc44NzOgj9CENWndMLYWQ encode iss=bOgu3TainXFFOgLi2Q27EE7BRtXIBqdD)\" curl \"$url\" -H \"Authorization: Bearer $token\" ;","title":"JWT"},{"location":"usage/apis/plugins/rate_limiting/","text":"Gu\u00eda de uso Rate limiting A nivel API Es posible configurar un l\u00edmite de llamadas (a.k.a. \"rate limit\") a la API por IP. En el panel \"Kong plugin rate limiting\" podemos ver como hacerlo, en el panel \"KONG API PLUGIN RATE LIMITINGS\". Luego de tildar enabled , debemos configurar cuales son los limites de llamadas. Los posibles valores configurables son: second : Llamadas por segundo minutes : Llamadas por minuto hour : Llamadas por hora day : Llamadas por d\u00eda A nivel Consumer Si estamos usando el plugin de autenticaci\u00f3n por JWT , es posible establecer un l\u00edmite basado en cada consumidor . Este limite su puede configurar en al editar un Kong Consumer . Adem\u00e1s si la opci\u00f3n Free tier esta activada, es posible establecer un limite \u00fanico para todos los usuarios an\u00f3nimos en conjunto. Este limite se establece en el kong consumer que se crea autom\u00e1ticamente, cuyo applicant es anonymous . Politicas Siempre tiene prioridad el rate limiting mas especifico Si se activa tanto rate limiting en la api con en su consumer solo se aplica la cuota del consumer. Rate limiting de una api es individual por cliente De aplicarse rate limiting de una api a un cliente este tendr\u00e1 su propia cuota, sin importar otras conexiones. Todas las conexiones de un consumer comparten una cuota Sin importar cuantas conexi\u00f3n se abran a una api, si estas se identifican con un consumer en com\u00fan entonces compartir\u00e1n una quota de requests. Consumers an\u00f3nimos no tienen trato especial Los consumers an\u00f3nimos son consumers igual que cualquiera. Por lo cual aplican las mismas pol\u00edticas para ellos como para consumers no an\u00f3nimos. Conexiones an\u00f3nimas comparten un mismo consumer an\u00f3nimo A cada conexi\u00f3n se le asigna un consumer en base al token provisto. Para mas informacion de autenticacion leer JWT - De proveer un token v\u00e1lido: se le asigna el consumer correspondiente. - De proveer un token invalido: se rechaza la conexi\u00f3n. - De no proveer un token: se le asigna el consumer an\u00f3nimo correspondiente. - De no estar activada la configuraci\u00f3n free tier se rechaza la conexion. Kong API: rate limiting Hay 2 opciones para guardar los rate limits de una API de Kong usados por el plugin KongPluginRateLimiting: - cluster - local Cluster: guarda la informaci\u00f3n en la base de datos y nunca las borra. Es por ello que dise\u00f1amos un proceso que corre peri\u00f3dicamente para borrar los datos de n d\u00edas de antig\u00fcedad. Local: guarda la informaci\u00f3n en la memoria RAM, lo cual tiene un tiempo de acceso m\u00e1s r\u00e1pido y no nos tenemos que preocupar por el borrado. \u00bfC\u00f3mo usar esta funcionalidad? Una KongAPI tiene un campo policy el cual permite elegir entre las opciones disponibles.","title":"Rate Limiting"},{"location":"usage/apis/plugins/rate_limiting/#guia-de-uso","text":"","title":"Gu\u00eda de uso"},{"location":"usage/apis/plugins/rate_limiting/#rate-limiting","text":"","title":"Rate limiting"},{"location":"usage/apis/plugins/rate_limiting/#a-nivel-api","text":"Es posible configurar un l\u00edmite de llamadas (a.k.a. \"rate limit\") a la API por IP. En el panel \"Kong plugin rate limiting\" podemos ver como hacerlo, en el panel \"KONG API PLUGIN RATE LIMITINGS\". Luego de tildar enabled , debemos configurar cuales son los limites de llamadas. Los posibles valores configurables son: second : Llamadas por segundo minutes : Llamadas por minuto hour : Llamadas por hora day : Llamadas por d\u00eda","title":"A nivel API"},{"location":"usage/apis/plugins/rate_limiting/#a-nivel-consumer","text":"Si estamos usando el plugin de autenticaci\u00f3n por JWT , es posible establecer un l\u00edmite basado en cada consumidor . Este limite su puede configurar en al editar un Kong Consumer . Adem\u00e1s si la opci\u00f3n Free tier esta activada, es posible establecer un limite \u00fanico para todos los usuarios an\u00f3nimos en conjunto. Este limite se establece en el kong consumer que se crea autom\u00e1ticamente, cuyo applicant es anonymous .","title":"A nivel Consumer"},{"location":"usage/apis/plugins/rate_limiting/#politicas","text":"","title":"Politicas"},{"location":"usage/apis/plugins/rate_limiting/#siempre-tiene-prioridad-el-rate-limiting-mas-especifico","text":"Si se activa tanto rate limiting en la api con en su consumer solo se aplica la cuota del consumer.","title":"Siempre tiene prioridad el rate limiting mas especifico"},{"location":"usage/apis/plugins/rate_limiting/#rate-limiting-de-una-api-es-individual-por-cliente","text":"De aplicarse rate limiting de una api a un cliente este tendr\u00e1 su propia cuota, sin importar otras conexiones.","title":"Rate limiting de una api es individual por cliente"},{"location":"usage/apis/plugins/rate_limiting/#todas-las-conexiones-de-un-consumer-comparten-una-cuota","text":"Sin importar cuantas conexi\u00f3n se abran a una api, si estas se identifican con un consumer en com\u00fan entonces compartir\u00e1n una quota de requests.","title":"Todas las conexiones de un consumer comparten una cuota"},{"location":"usage/apis/plugins/rate_limiting/#consumers-anonimos-no-tienen-trato-especial","text":"Los consumers an\u00f3nimos son consumers igual que cualquiera. Por lo cual aplican las mismas pol\u00edticas para ellos como para consumers no an\u00f3nimos.","title":"Consumers an\u00f3nimos no tienen trato especial"},{"location":"usage/apis/plugins/rate_limiting/#conexiones-anonimas-comparten-un-mismo-consumer-anonimo","text":"A cada conexi\u00f3n se le asigna un consumer en base al token provisto. Para mas informacion de autenticacion leer JWT - De proveer un token v\u00e1lido: se le asigna el consumer correspondiente. - De proveer un token invalido: se rechaza la conexi\u00f3n. - De no proveer un token: se le asigna el consumer an\u00f3nimo correspondiente. - De no estar activada la configuraci\u00f3n free tier se rechaza la conexion.","title":"Conexiones an\u00f3nimas comparten un mismo consumer an\u00f3nimo"},{"location":"usage/apis/plugins/rate_limiting/#kong-api-rate-limiting","text":"Hay 2 opciones para guardar los rate limits de una API de Kong usados por el plugin KongPluginRateLimiting: - cluster - local Cluster: guarda la informaci\u00f3n en la base de datos y nunca las borra. Es por ello que dise\u00f1amos un proceso que corre peri\u00f3dicamente para borrar los datos de n d\u00edas de antig\u00fcedad. Local: guarda la informaci\u00f3n en la memoria RAM, lo cual tiene un tiempo de acceso m\u00e1s r\u00e1pido y no nos tenemos que preocupar por el borrado. \u00bfC\u00f3mo usar esta funcionalidad? Una KongAPI tiene un campo policy el cual permite elegir entre las opciones disponibles.","title":"Kong API: rate limiting"},{"location":"usage/consumers/consumer_registration/","text":"Consumers Para APIs protegidas bajo autenticaci\u00f3n (es decir, con el plugin JWT activado), es necesario crear consumidores de APIs. Estos consumers tendr\u00e1n asociados un token JWT que, a trav\u00e9s de headers HTTP, podr\u00e1n ser usados para autenticarse contra el backend. Registrar un Consumer Una opci\u00f3n para registrar consumidores es a trav\u00e9s de token requests , y luego acept\u00e1ndose. Otra opci\u00f3n es crear consumidores directamente, instanciando nuevos modelos de Kong Consumers en el API Registry. Luego de cualquiera de estos dos pasos, el token JWT de la API asociado al usuario se encuentra bajo el modelo Kong Consumer creado por cualquiera de las dos acciones (en /management/ingresar/api_registry/kongconsumer/ ) Un consumer est\u00e1 identificado por su direcci\u00f3n de correo electr\u00f3nico y la API a la cual se asocia el JWT. No es posible crear tokens adicionales para esa combinaci\u00f3n de usuario + API, ni usar el token generado para otras APIs.","title":"Registro de consumers"},{"location":"usage/consumers/consumer_registration/#consumers","text":"Para APIs protegidas bajo autenticaci\u00f3n (es decir, con el plugin JWT activado), es necesario crear consumidores de APIs. Estos consumers tendr\u00e1n asociados un token JWT que, a trav\u00e9s de headers HTTP, podr\u00e1n ser usados para autenticarse contra el backend.","title":"Consumers"},{"location":"usage/consumers/consumer_registration/#registrar-un-consumer","text":"Una opci\u00f3n para registrar consumidores es a trav\u00e9s de token requests , y luego acept\u00e1ndose. Otra opci\u00f3n es crear consumidores directamente, instanciando nuevos modelos de Kong Consumers en el API Registry. Luego de cualquiera de estos dos pasos, el token JWT de la API asociado al usuario se encuentra bajo el modelo Kong Consumer creado por cualquiera de las dos acciones (en /management/ingresar/api_registry/kongconsumer/ ) Un consumer est\u00e1 identificado por su direcci\u00f3n de correo electr\u00f3nico y la API a la cual se asocia el JWT. No es posible crear tokens adicionales para esa combinaci\u00f3n de usuario + API, ni usar el token generado para otras APIs.","title":"Registrar un Consumer"},{"location":"usage/consumers/token_request/","text":"Gu\u00eda de uso Token Request api : La api a la cual el consumer creado se subscribe. applicant : Nombre de solicitante, se usa para identificarlo. contact email : Email de contacto con el solicitante, solo para uso administrativo. consumer application : Nombre de la aplicaci\u00f3n que consume la api en solicitud, s\u00f3lo para uso administrativo. requests per day : Cantidad de requests estimados a la api por dia, solo para uso administrativo. state : Estado del token request ( Aceptada | Rechazada | Pendiente ). Cliente Como cliente de la app, si quiero obtener un token para una api con autenticaci\u00f3n por JWT , tengo que realizar una peticion en la landing de dicha api, sea /georef/ /series/ Admin C\u00f3mo admin puedo generar el token request desde el admin de api-mgmt. Aceptar o Rechazar Token Requests Los tokens requests se aceptan o rechazan a traves de acciones de django, en el admin.","title":"Token Requests"},{"location":"usage/consumers/token_request/#guia-de-uso","text":"","title":"Gu\u00eda de uso"},{"location":"usage/consumers/token_request/#token-request","text":"api : La api a la cual el consumer creado se subscribe. applicant : Nombre de solicitante, se usa para identificarlo. contact email : Email de contacto con el solicitante, solo para uso administrativo. consumer application : Nombre de la aplicaci\u00f3n que consume la api en solicitud, s\u00f3lo para uso administrativo. requests per day : Cantidad de requests estimados a la api por dia, solo para uso administrativo. state : Estado del token request ( Aceptada | Rechazada | Pendiente ).","title":"Token Request"},{"location":"usage/consumers/token_request/#cliente","text":"Como cliente de la app, si quiero obtener un token para una api con autenticaci\u00f3n por JWT , tengo que realizar una peticion en la landing de dicha api, sea /georef/ /series/","title":"Cliente"},{"location":"usage/consumers/token_request/#admin","text":"C\u00f3mo admin puedo generar el token request desde el admin de api-mgmt.","title":"Admin"},{"location":"usage/consumers/token_request/#aceptar-o-rechazar-token-requests","text":"Los tokens requests se aceptan o rechazan a traves de acciones de django, en el admin.","title":"Aceptar o Rechazar Token Requests"}]}